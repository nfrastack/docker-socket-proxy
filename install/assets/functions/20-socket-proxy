#!/command/with-contenv bash

configure_nginx() {
    update_template /etc/nginx/sites.available/docker-socket-proxy.conf DOCKER_SOCKET_URI

    sed -i "s|\$http_x_forwarded_for|\$remote_addr|g" /etc/nginx/snippets/logging.conf

    update_template /etc/nginx/templates/proxy_pass.template \
                                                                TIMEOUT_CONNECT \
                                                                TIMEOUT_READ \
                                                                TIMEOUT_SEND
    print_notice "Connection Timeout: ${TIMEOUT_CONNECT}"
    print_notice "Read Timeout: ${TIMEOUT_READ}"
    print_notice "Send Timeout: ${TIMEOUT_SEND}"

    allowed_ip=$(echo "${ALLOWED_IPS}" | tr "," "\n")
    for allowed_ip in ${allowed_ip}; do
            print_notice "Allowing IP: ${allowed_ip}"
            ip_allow="$(echo ${ip_allow} ; cat <<EOF
                allow ${allowed_ip};
EOF
        )"
    done
    ip_allow=$(echo $ip_allow | uniq)

    if var_true "${API_ENABLE_AUTH}" ; then
        sed -i "/location ~ \/auth {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_BUILD}" ; then
        sed -i "/location ~ \/build {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_COMMIT}" ; then
        sed -i "/location ~ \/commit {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_CONFIGS}" ; then
        sed -i "/location ~ \/configs {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_CONTAINERS}" ; then
        sed -i "/location ~ \/containers {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_DISTRIBUTION}" ; then
        sed -i "/location ~ \/distribution {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_EVENTS}" ; then
        sed -i "/location ~ \/events {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_EXEC}" ; then
        sed -i "/location ~ \/exec {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_GRPC}" ; then
        sed -i "/location ~ \/grpc {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_IMAGES}" ; then
        sed -i "/location ~ \/images {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_INFO}" ; then
        sed -i "/location ~ \/info {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_NETWORKS}" ; then
        sed -i "/location ~ \/networks {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_NODES}" ; then
        sed -i "/location ~ \/nodes {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_PING}" ; then
        sed -i "/location ~ \/_ping {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_PLUGINS}" ; then
        sed -i "/location ~ \/plugins {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_POST}" ; then
        sed -i "/location ~ \/post {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_SECRETS}" ; then
        sed -i "/location ~ \/secrets {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_SERVICES}" ; then
        sed -i "/location ~ \/services {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_SESSION}" ; then
        sed -i "/location ~ \/session {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_SWARM}" ; then
        sed -i "/location ~ \/swarm {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_SYSTEM}" ; then
        sed -i "/location ~ \/system {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_TASKS}" ; then
        sed -i "/location ~ \/tasks {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_VERSION}" ; then
        sed -i "/location ~ \/version {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi
    if var_true "${API_ENABLE_VOLUMES}" ; then
        sed -i "/location ~ \/volumes {/a\                ${ip_allow}" /etc/nginx/sites.available/docker-socket-proxy.conf
    fi

    if var_true "${ENABLE_READONLY}" ; then
        print_notice "Enabling Read Only access to socket (GET)"
        sed -i "s|GET POST|GET|g" /etc/nginx/sites.available/docker-socket-proxy.conf
    else
        print_notice "Enabling Read-Write access to socket (GET | POST)"
    fi
}

sanity_test() {
    if [[ "${DOCKER_SOCKET_URI}" =~ ^unix:.* ]] ; then
        if [ ! -S "${DOCKER_SOCKET_URI/unix:/}" ] ; then
            print_error "[sanity_test] Can't access Docker socket at '${DOCKER_SOCKET_URI/unix:/}'"
            exit 1
        fi
    fi
}

setup_container_mode() {
    if [ -f "/tmp/.container/docker-socket-proxy/.mode-env" ]; then
        print_debug "[setup_container_mode] Importing MODE environment generated variables"
        source /tmp/.container/docker-socket-proxy/.mode-env
    else
        mkdir -p /tmp/.container/docker-socket-proxy/
        if [ "${MODE,,}" = "aio" ] || [ "${MODE,,}" = "all" ] ; then
            print_debug "[setup_container_mode] Container Mode: All"
            print_debug "[setup_container_mode] Creating MODE environment generated variables"
            echo "API_ENABLE_AUTH=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_BUILD=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_COMMIT=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_CONFIGS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_CONTAINERS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_DISTRIBUTION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_EVENTS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_EXEC=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_GRPC=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_IMAGES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_INFO=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_NETWORKS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_NODES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_PING=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_PLUGINS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_SECRETS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_SERVICES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_SESSION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_SWARM=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_SYSTEM=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_TASKS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_VERSION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_VOLUMES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
        elif [ "${MODE,,}" = "default" ] ; then
            echo "API_ENABLE_EVENTS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_PING=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
            echo "API_ENABLE_VERSION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
        else
            print_notice "Enabling access to '${MODE,,}' endpoints"
            modes=$(echo "${MODE,,}" | tr "," "\n")
            for mode in $modes; do
                case "${mode,,}" in
                    "auth" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: AUTH"
                        echo "API_ENABLE_AUTH=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "build" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: BUILD"
                        echo "API_ENABLE_BUILD=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "commit" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: COMMIT"
                        echo "API_ENABLE_COMMIT=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "configs" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: CONFIGS"
                        echo "API_ENABLE_CONFIGS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "containers" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: CONTAINERS"
                        echo "API_ENABLE_CONTAINERS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "distribution" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: DISTRIBUTION"
                        echo "API_ENABLE_DISTRIBUTION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "events" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: EVENTS"
                        echo "API_ENABLE_EVENTS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "exec" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: EXEC"
                        echo "API_ENABLE_EXEC=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "grpc" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: GRPC"
                        echo "API_ENABLE_GRPC=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "images" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: IMAGES"
                        echo "API_ENABLE_IMAGES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "info" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: INFO"
                        echo "API_ENABLE_INFO=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "networks" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: NETWORKS"
                        echo "API_ENABLE_NETWORKS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "nodes" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: NODES"
                        echo "API_ENABLE_NODES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "ping" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: PING"
                        echo "API_ENABLE_PING=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "plugins" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: PLUGINS"
                        echo "API_ENABLE_PLUGINS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "post" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: POST"
                        echo "API_ENABLE_POST=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "secrets" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SECRETS"
                        echo "API_ENABLE_SECRETS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "services" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SERVICES"
                        echo "API_ENABLE_SERVICES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "session" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SESSION"
                        echo "API_ENABLE_SESSION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "swarm" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SWARM"
                        echo "API_ENABLE_SWARM=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "system" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: SYSTEM"
                        echo "API_ENABLE_SYSTEM=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "tasks" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: TASKS"
                        echo "API_ENABLE_TASKS=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "version" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: VERSION"
                        echo "API_ENABLE_VERSION=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    "volumes" )
                        print_debug "[setup_container_mode] Enabling Container Mode for: VOLUMES"
                        echo "API_ENABLE_VOLUMES=TRUE" >> /tmp/.container/docker-socket-proxy/.mode-env
                    ;;
                    *)
                        print_error "[setup_container_mode] Unknown 'MODE' environment variable - exitting.."
                        exit 1
                    ;;
                esac
            done
        fi
        source /tmp/.container/docker-socket-proxy/.mode-env
    fi
}
